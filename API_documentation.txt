String size constraints
	user_id, link_id, group_id = 36
	user_name, group_name <= 15
	passcode <= 15
	email_id <= 40
	group_info <= 150
	roles = adm/mem
	title <= 50
	link <= 256
	info <= 100
	tags <= 15
	react = l/d

APIs 
Local storage:
	last updated time_stamp
	userid
Client Side

Update new message actions:
	Type : void
	Name : updateMessages
	Params : <list<{
			sender_id: <uuid type char 16>,
			group_id: <uuid type char 16>,
			link: {
				link_id : <uuid type char 16>,
				title: <string>,
				link: <string>,
				info: <string>,
				tags: <list<strings>>,
				time_stamp: <time_stamp>
			}
		}>>

Update delete message actions:
	Type : void
	Name : deleteMessages
	Params : <list<{
			link_id: <uuid type char 16>
		}>>

Update react message actions:
	Type : void
	Name : updateReactions
	Params : <list<{
			user_id: <uuid type char 16>,
			link_id: <uuid type char 16>,
			react: <string>
		}>>

Update add actions:
	Type : void
	Name : addUsers
	Params : {
		<list<{
			user_id: <uuid type char 16>,
			group_id: <uuid type char 16>,
			user_name: <string>,
			role: <string>
		}>>
	}

Update get Added:
	Type : void
	Name : getAdded
	Params : {
		<list<{
			group_id: <uuid type char 16>,
			members: <list<{
				user_id: <uuid type char 16>,
				user_name: <string>,
				roles: <string>
			}>>
		}>>
	}

Read groups :
	Type : list<json>
	Name : read_groups
	Params : {
		user_id : <uuid type char 16>,
		group_id : <uuid type char 16>
	}
	Returns : {
		groups : <list<{
				group_id : <int>,
				group_name: <string>,
				group_info: <string>
			}>>
	}

Search groups:
	Type : list<json>
	Name : search_group
	Params : {
		user_id : <uuid type char 16>,
		group_id : <uuid type char 16>
	}
	Returns : {
		groups : <list<{
				group_id : <int>,
				group_name: <string>,
				group_info: <string>
			}>>
	}

Search links global
	Type : list<json>
	Name : search_all
	Params : {
	}
	Returns : {
		links : <list<{
				link_id : <uuid type char 16>,
				group_id : <uuid type char 16>,
				title: <string>,
				link: <string>,
				info: <string>
			}>>
	}

Search links for group:
	Type : list<json>
	Name : search_group
	Params : {
		group_id : <uuid type char 16>
	}
	Returns : {
		links : <list<{
				link_id : <uuid type char 16>,
				title: <string>,
				link: <string>,
				info: <string>
			}>>
	}

Sort the links based on a parameter and a filter:
	Type : list<json>
	Name : sort_links
	Params : {
		sort_by : <string>,
		tags: <list<strings>>
	}
	Returns : {
		links : <list<{
				link_id : <uuid type char 16>,
				title: <string>,
				link: <string>,
				info: <string>
			}>>
	}

Update bookmarks:
	Type : void
	Name : update_bookmark
	Params : {
		link_id : <uuid type char 16>
		action : <string>
	}

Get all groups:
	Type : list<json>
	Name : fetchGroups
	Returns :
		<list<{
			groupId : <uuid type char 16>,
			groupName: <string>
		}>>

Get links for a particular group:
	Type : list<json>
	Name : fetchLinks
	Params : {
		groupId : <uuid type char 16>
	}
	Returns : 
		<list<{
			linkId : <uuid type char 16>,
			title: <string>,
			senderName: <string>,
			timeStamp: <time_stamp_dart>
		}>>

Get bookmarks:
	Type : list<json>
	Name : fetchBookmarks
	Returns :  
		<list<{
			linkId : <uuid type char 16>,
			title: <string>,
			senderName: <string>,
			timeStamp: <time_stamp_dart>
		}>>

Get group info along with members and thier roles:
	Type : list<json>
	Name : getGroupInfo
	Params : {
		group_id : <uuid type char 16>
	}
	Returns : {
		groupName : <string>,
		groupDesc : <string>,
		members : <list<{
			userId: <uuid type char 16>,
			userName: <string>,
			role: <Enum in flutter>
		}>>
	}

Update change role actions:
	Type : void
	Name : updateRoles
	Params : <list<{
		groupId: <uuid type char 16>,
		userId: <uuid type char 16>,
		role: <Enum in flutter>
	}>>

Update kick actions:
	Type : void
	Name : removeMembers
	Params : <list<{
		userId : <uuid type char 16>,
		groupId : <uuid type char 16>
	}>>

Get group specific user information:
	Type : list<json>
	Name : getGroupSpecificUserInfo
	Params : {
		groupId : <uuid type char 16>,
		userId : <uuid type char 16>
	}
	Returns : {
		userName : <string>,
		role : <Enum in flutter>
	}

Get link info:
	Type : list<json>
	Name : getLinkInfo
	Params : {
		linkId : <uuid type char 16>
	}
	Returns : {
		title : <string>,
		link : <string>,
		info : <string>,
		senderName : <string>,
		timeStamp : <time_stamp_dart>,
		likes : <int>,
		dislikes : <int>,
		tags: <list<string>>
	}

Server Side

Reset:

Login:
	Type: post 
	URL: /login
	Body: {
		user_name : <string>,
		password : <string>
	}
	Return: {
		success: <bool>,
		userid: <uuid type char 16>,
        message: <string>
	}

Sign Up:
	Type: post 
	URL: /signup
	Body: {
		user_name : <string>,
		password : <string>,
		email : <string>
	}
	Return: {
		success: <bool>,
		userid: <uuid type char 16>,
        message: <string>
	}

New group:
	Type: post 
	URL: /create_group
	Body: {
		user_id : <uuid type char 16>,
		group_name : <string>,
		group_info : <string>,
		members : <list<{
				participant_name: <string>,
				role: <string>
			}>>
	}
	Return: {
		success: <bool>,
		group_id : <uuid type char 16>,
		message: <string>,
		time_stamp: <time_stamp>
	}

Fetch Updates:
	Type: get
	URL: /get_updates
	Params: {
		user_id: <uuid type char 16>,
		last_opened: <time_stamp>
	}
	Return: {
		time_stamp: <time_stamp>,
		new_messages: <list<{
			sender_id: <uuid type char 16>,
			group_id: <uuid type char 16>,
			link_id : <uuid type char 16>,
			title: <string>,
			link: <string>,
			info: <string>,
			tags: <list<strings>>,
			time_stamp: <time_stamp>
		}>>,
		delete_messages: <list<{
			link_id: <uuid type char 16>
		}>>,
		react: <list<{
			sender_id: <uuid type char 16>,
			link_id: <uuid type char 16>,
			react: <string>
		}>>,
		change_role: <list<{
			affected_id: <uuid type char 16>,
			group_id: <uuid type char 16>,
			affected_role: <string>
		}>>,
		remove_member: <list<{
			affected_id: <uuid type char 16>,
			group_id: <uuid type char 16>
		}>>,
		add_user: <list<{
			user_id: <uuid type char 16>,
			group_id: <uuid type char 16>,
			user_name: <string>,
			role: <string>
		}>>,
		get_added: <list<{
			group_id: <uuid type char 16>,
			role: <string>,
			members: <list<{
				user_id: <uuid type char 16>,
				user_name: <string>,
				roles: <string>
			}>>
		}>>
	}

Broadcast message:
	Type: post 
	URL: /send_message
	Body: {
		sender_id : <uuid type char 16>,
		group_id : <uuid type char 16>,
		link: {
			title: <string>,
			link: <string>,
			info: <string>,
			tags: <list<strings>>
		}
	}
	
	Return: {
		link_id: <uuid type char 16>,
		time_stamp: <time_stamp>
	}

Broadcast react:
	Type: post 
	URL: /react
	Body: {
		sender_id : <uuid type char 16>,
		link_id : <uuid type char 16>,
		group_id : <uuid type char 16>,
		react : <string>
	}
	Return: {
		time_stamp : <time_stamp>
	}

Broadcast delete:
	Type: post 
	URL: /delete_message
	Body: {
		user_id : <uuid type char 16>,
		link_id : <uuid type char 16>,
		group_id : <uuid type char 16>
	}
	Return: {
		time_stamp : <time_stamp>
	}
	
Broadcast add:
	Type: post 
	URL: /add_user
	Body: {
		user_id : <uuid type char 16>,
		group_id : <uuid type char 16>,
		new_member_name : <string>,
		new_member_role : <string>
	}
	Return: {
		success : <bool>,
		message : <string>,
		new_member_id : <uuid type char 16>,
		time_stamp : <time_stamp>
	}

Broadcast change role:
	Type: post 
	URL: /change_role
	Body : {
		userId : <uuid type char 16>,
		groupId : <uuid type char 16>,
		changerId : <uuid type char 16>,
		role : <string adm|mem>
	}
	Return: {
		success : <bool>,
		message : <string>
		timeStamp : <time_stamp>,
	}

Broadcast kick:
	Type: post 
	URL: /remove_member
	Body: {
		userId : <uuid type char 16>,
		kickerId : <uuid type char 16>,
		groupId : <uuid type char 16>
	}
	Return: {
		success : <bool>,
		message : <string>,
		timeStamp : <time_stamp>
	}
